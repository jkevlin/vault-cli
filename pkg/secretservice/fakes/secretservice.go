// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/hashicorp/vault/api"
	"github.com/jkevlin/vault-cli/pkg/secretservice"
)

type FakeSecretService struct {
	DeleteStub        func(string) (*api.Secret, error)
	deleteMutex       sync.RWMutex
	deleteArgsForCall []struct {
		arg1 string
	}
	deleteReturns struct {
		result1 *api.Secret
		result2 error
	}
	deleteReturnsOnCall map[int]struct {
		result1 *api.Secret
		result2 error
	}
	IsKVv2Stub        func(string) (string, bool, error)
	isKVv2Mutex       sync.RWMutex
	isKVv2ArgsForCall []struct {
		arg1 string
	}
	isKVv2Returns struct {
		result1 string
		result2 bool
		result3 error
	}
	isKVv2ReturnsOnCall map[int]struct {
		result1 string
		result2 bool
		result3 error
	}
	ListStub        func(string) (*api.Secret, error)
	listMutex       sync.RWMutex
	listArgsForCall []struct {
		arg1 string
	}
	listReturns struct {
		result1 *api.Secret
		result2 error
	}
	listReturnsOnCall map[int]struct {
		result1 *api.Secret
		result2 error
	}
	ReadStub        func(string) (*api.Secret, error)
	readMutex       sync.RWMutex
	readArgsForCall []struct {
		arg1 string
	}
	readReturns struct {
		result1 *api.Secret
		result2 error
	}
	readReturnsOnCall map[int]struct {
		result1 *api.Secret
		result2 error
	}
	ReadWithDataStub        func(string, map[string][]string) (*api.Secret, error)
	readWithDataMutex       sync.RWMutex
	readWithDataArgsForCall []struct {
		arg1 string
		arg2 map[string][]string
	}
	readWithDataReturns struct {
		result1 *api.Secret
		result2 error
	}
	readWithDataReturnsOnCall map[int]struct {
		result1 *api.Secret
		result2 error
	}
	WriteStub        func(string, map[string]interface{}) (*api.Secret, error)
	writeMutex       sync.RWMutex
	writeArgsForCall []struct {
		arg1 string
		arg2 map[string]interface{}
	}
	writeReturns struct {
		result1 *api.Secret
		result2 error
	}
	writeReturnsOnCall map[int]struct {
		result1 *api.Secret
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSecretService) Delete(arg1 string) (*api.Secret, error) {
	fake.deleteMutex.Lock()
	ret, specificReturn := fake.deleteReturnsOnCall[len(fake.deleteArgsForCall)]
	fake.deleteArgsForCall = append(fake.deleteArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("Delete", []interface{}{arg1})
	fake.deleteMutex.Unlock()
	if fake.DeleteStub != nil {
		return fake.DeleteStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSecretService) DeleteCallCount() int {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return len(fake.deleteArgsForCall)
}

func (fake *FakeSecretService) DeleteCalls(stub func(string) (*api.Secret, error)) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = stub
}

func (fake *FakeSecretService) DeleteArgsForCall(i int) string {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	argsForCall := fake.deleteArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSecretService) DeleteReturns(result1 *api.Secret, result2 error) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = nil
	fake.deleteReturns = struct {
		result1 *api.Secret
		result2 error
	}{result1, result2}
}

func (fake *FakeSecretService) DeleteReturnsOnCall(i int, result1 *api.Secret, result2 error) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = nil
	if fake.deleteReturnsOnCall == nil {
		fake.deleteReturnsOnCall = make(map[int]struct {
			result1 *api.Secret
			result2 error
		})
	}
	fake.deleteReturnsOnCall[i] = struct {
		result1 *api.Secret
		result2 error
	}{result1, result2}
}

func (fake *FakeSecretService) IsKVv2(arg1 string) (string, bool, error) {
	fake.isKVv2Mutex.Lock()
	ret, specificReturn := fake.isKVv2ReturnsOnCall[len(fake.isKVv2ArgsForCall)]
	fake.isKVv2ArgsForCall = append(fake.isKVv2ArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("IsKVv2", []interface{}{arg1})
	fake.isKVv2Mutex.Unlock()
	if fake.IsKVv2Stub != nil {
		return fake.IsKVv2Stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	fakeReturns := fake.isKVv2Returns
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeSecretService) IsKVv2CallCount() int {
	fake.isKVv2Mutex.RLock()
	defer fake.isKVv2Mutex.RUnlock()
	return len(fake.isKVv2ArgsForCall)
}

func (fake *FakeSecretService) IsKVv2Calls(stub func(string) (string, bool, error)) {
	fake.isKVv2Mutex.Lock()
	defer fake.isKVv2Mutex.Unlock()
	fake.IsKVv2Stub = stub
}

func (fake *FakeSecretService) IsKVv2ArgsForCall(i int) string {
	fake.isKVv2Mutex.RLock()
	defer fake.isKVv2Mutex.RUnlock()
	argsForCall := fake.isKVv2ArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSecretService) IsKVv2Returns(result1 string, result2 bool, result3 error) {
	fake.isKVv2Mutex.Lock()
	defer fake.isKVv2Mutex.Unlock()
	fake.IsKVv2Stub = nil
	fake.isKVv2Returns = struct {
		result1 string
		result2 bool
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeSecretService) IsKVv2ReturnsOnCall(i int, result1 string, result2 bool, result3 error) {
	fake.isKVv2Mutex.Lock()
	defer fake.isKVv2Mutex.Unlock()
	fake.IsKVv2Stub = nil
	if fake.isKVv2ReturnsOnCall == nil {
		fake.isKVv2ReturnsOnCall = make(map[int]struct {
			result1 string
			result2 bool
			result3 error
		})
	}
	fake.isKVv2ReturnsOnCall[i] = struct {
		result1 string
		result2 bool
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeSecretService) List(arg1 string) (*api.Secret, error) {
	fake.listMutex.Lock()
	ret, specificReturn := fake.listReturnsOnCall[len(fake.listArgsForCall)]
	fake.listArgsForCall = append(fake.listArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("List", []interface{}{arg1})
	fake.listMutex.Unlock()
	if fake.ListStub != nil {
		return fake.ListStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSecretService) ListCallCount() int {
	fake.listMutex.RLock()
	defer fake.listMutex.RUnlock()
	return len(fake.listArgsForCall)
}

func (fake *FakeSecretService) ListCalls(stub func(string) (*api.Secret, error)) {
	fake.listMutex.Lock()
	defer fake.listMutex.Unlock()
	fake.ListStub = stub
}

func (fake *FakeSecretService) ListArgsForCall(i int) string {
	fake.listMutex.RLock()
	defer fake.listMutex.RUnlock()
	argsForCall := fake.listArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSecretService) ListReturns(result1 *api.Secret, result2 error) {
	fake.listMutex.Lock()
	defer fake.listMutex.Unlock()
	fake.ListStub = nil
	fake.listReturns = struct {
		result1 *api.Secret
		result2 error
	}{result1, result2}
}

func (fake *FakeSecretService) ListReturnsOnCall(i int, result1 *api.Secret, result2 error) {
	fake.listMutex.Lock()
	defer fake.listMutex.Unlock()
	fake.ListStub = nil
	if fake.listReturnsOnCall == nil {
		fake.listReturnsOnCall = make(map[int]struct {
			result1 *api.Secret
			result2 error
		})
	}
	fake.listReturnsOnCall[i] = struct {
		result1 *api.Secret
		result2 error
	}{result1, result2}
}

func (fake *FakeSecretService) Read(arg1 string) (*api.Secret, error) {
	fake.readMutex.Lock()
	ret, specificReturn := fake.readReturnsOnCall[len(fake.readArgsForCall)]
	fake.readArgsForCall = append(fake.readArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("Read", []interface{}{arg1})
	fake.readMutex.Unlock()
	if fake.ReadStub != nil {
		return fake.ReadStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.readReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSecretService) ReadCallCount() int {
	fake.readMutex.RLock()
	defer fake.readMutex.RUnlock()
	return len(fake.readArgsForCall)
}

func (fake *FakeSecretService) ReadCalls(stub func(string) (*api.Secret, error)) {
	fake.readMutex.Lock()
	defer fake.readMutex.Unlock()
	fake.ReadStub = stub
}

func (fake *FakeSecretService) ReadArgsForCall(i int) string {
	fake.readMutex.RLock()
	defer fake.readMutex.RUnlock()
	argsForCall := fake.readArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSecretService) ReadReturns(result1 *api.Secret, result2 error) {
	fake.readMutex.Lock()
	defer fake.readMutex.Unlock()
	fake.ReadStub = nil
	fake.readReturns = struct {
		result1 *api.Secret
		result2 error
	}{result1, result2}
}

func (fake *FakeSecretService) ReadReturnsOnCall(i int, result1 *api.Secret, result2 error) {
	fake.readMutex.Lock()
	defer fake.readMutex.Unlock()
	fake.ReadStub = nil
	if fake.readReturnsOnCall == nil {
		fake.readReturnsOnCall = make(map[int]struct {
			result1 *api.Secret
			result2 error
		})
	}
	fake.readReturnsOnCall[i] = struct {
		result1 *api.Secret
		result2 error
	}{result1, result2}
}

func (fake *FakeSecretService) ReadWithData(arg1 string, arg2 map[string][]string) (*api.Secret, error) {
	fake.readWithDataMutex.Lock()
	ret, specificReturn := fake.readWithDataReturnsOnCall[len(fake.readWithDataArgsForCall)]
	fake.readWithDataArgsForCall = append(fake.readWithDataArgsForCall, struct {
		arg1 string
		arg2 map[string][]string
	}{arg1, arg2})
	fake.recordInvocation("ReadWithData", []interface{}{arg1, arg2})
	fake.readWithDataMutex.Unlock()
	if fake.ReadWithDataStub != nil {
		return fake.ReadWithDataStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.readWithDataReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSecretService) ReadWithDataCallCount() int {
	fake.readWithDataMutex.RLock()
	defer fake.readWithDataMutex.RUnlock()
	return len(fake.readWithDataArgsForCall)
}

func (fake *FakeSecretService) ReadWithDataCalls(stub func(string, map[string][]string) (*api.Secret, error)) {
	fake.readWithDataMutex.Lock()
	defer fake.readWithDataMutex.Unlock()
	fake.ReadWithDataStub = stub
}

func (fake *FakeSecretService) ReadWithDataArgsForCall(i int) (string, map[string][]string) {
	fake.readWithDataMutex.RLock()
	defer fake.readWithDataMutex.RUnlock()
	argsForCall := fake.readWithDataArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeSecretService) ReadWithDataReturns(result1 *api.Secret, result2 error) {
	fake.readWithDataMutex.Lock()
	defer fake.readWithDataMutex.Unlock()
	fake.ReadWithDataStub = nil
	fake.readWithDataReturns = struct {
		result1 *api.Secret
		result2 error
	}{result1, result2}
}

func (fake *FakeSecretService) ReadWithDataReturnsOnCall(i int, result1 *api.Secret, result2 error) {
	fake.readWithDataMutex.Lock()
	defer fake.readWithDataMutex.Unlock()
	fake.ReadWithDataStub = nil
	if fake.readWithDataReturnsOnCall == nil {
		fake.readWithDataReturnsOnCall = make(map[int]struct {
			result1 *api.Secret
			result2 error
		})
	}
	fake.readWithDataReturnsOnCall[i] = struct {
		result1 *api.Secret
		result2 error
	}{result1, result2}
}

func (fake *FakeSecretService) Write(arg1 string, arg2 map[string]interface{}) (*api.Secret, error) {
	fake.writeMutex.Lock()
	ret, specificReturn := fake.writeReturnsOnCall[len(fake.writeArgsForCall)]
	fake.writeArgsForCall = append(fake.writeArgsForCall, struct {
		arg1 string
		arg2 map[string]interface{}
	}{arg1, arg2})
	fake.recordInvocation("Write", []interface{}{arg1, arg2})
	fake.writeMutex.Unlock()
	if fake.WriteStub != nil {
		return fake.WriteStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.writeReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSecretService) WriteCallCount() int {
	fake.writeMutex.RLock()
	defer fake.writeMutex.RUnlock()
	return len(fake.writeArgsForCall)
}

func (fake *FakeSecretService) WriteCalls(stub func(string, map[string]interface{}) (*api.Secret, error)) {
	fake.writeMutex.Lock()
	defer fake.writeMutex.Unlock()
	fake.WriteStub = stub
}

func (fake *FakeSecretService) WriteArgsForCall(i int) (string, map[string]interface{}) {
	fake.writeMutex.RLock()
	defer fake.writeMutex.RUnlock()
	argsForCall := fake.writeArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeSecretService) WriteReturns(result1 *api.Secret, result2 error) {
	fake.writeMutex.Lock()
	defer fake.writeMutex.Unlock()
	fake.WriteStub = nil
	fake.writeReturns = struct {
		result1 *api.Secret
		result2 error
	}{result1, result2}
}

func (fake *FakeSecretService) WriteReturnsOnCall(i int, result1 *api.Secret, result2 error) {
	fake.writeMutex.Lock()
	defer fake.writeMutex.Unlock()
	fake.WriteStub = nil
	if fake.writeReturnsOnCall == nil {
		fake.writeReturnsOnCall = make(map[int]struct {
			result1 *api.Secret
			result2 error
		})
	}
	fake.writeReturnsOnCall[i] = struct {
		result1 *api.Secret
		result2 error
	}{result1, result2}
}

func (fake *FakeSecretService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	fake.isKVv2Mutex.RLock()
	defer fake.isKVv2Mutex.RUnlock()
	fake.listMutex.RLock()
	defer fake.listMutex.RUnlock()
	fake.readMutex.RLock()
	defer fake.readMutex.RUnlock()
	fake.readWithDataMutex.RLock()
	defer fake.readWithDataMutex.RUnlock()
	fake.writeMutex.RLock()
	defer fake.writeMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeSecretService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ secretservice.SecretService = new(FakeSecretService)
